// Generated by Apple Swift version 2.3 (swiftlang-800.10.12 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import ObjectiveC;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface UIButton (SWIFT_EXTENSION(Urca))

/// ランディングページ・クリック計測 URL.
@property (nonatomic, copy) NSString * _Nullable clickUrl;
@end


@interface UIView (SWIFT_EXTENSION(Urca))

/// 画面項目が設定 ? された : されていない.
@property (nonatomic) BOOL loaded;
@end



/// 広告情報.
SWIFT_CLASS("_TtC4Urca10UrcaAdInfo")
@interface UrcaAdInfo : NSObject <NSCopying>

/// インフィードID.
@property (nonatomic, copy) NSString * _Nonnull infeedId;

/// 当該モデルを識別するID.
@property (nonatomic, copy) NSString * _Nonnull uuid;

/// MARK: NSCopying
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;


/// インフィード広告リクエスト 完了通知プロトコル.
SWIFT_PROTOCOL("_TtP4Urca10UrcaInfeed_")
@protocol UrcaInfeed

/// インフィード広告リクエスト 取得完了.
///
/// 広告リクエストのコールバック.
///
/// \param count 広告取得件数.
- (void)successfulToReceivedAt:(NSInteger)count;

/// インフィード広告リクエスト 取得失敗.
///
/// 広告リクエストのコールバック.
///
/// \param error エラー.
- (void)failedToReceivedWith:(NSError * _Nullable)error;
@end

@class NSBundle;
@class UrcaRequest;
@class UITableViewCell;


/// SDK マネージャ
SWIFT_CLASS("_TtC4Urca11UrcaManager")
@interface UrcaManager : NSObject

/// シングルトン.
+ (UrcaManager * _Nonnull)shared;

/// urca SDKのバンドル.
@property (nonatomic, strong) NSBundle * _Nonnull bundle;

/// タブレットでインフィード広告を表示するか.
@property (nonatomic) BOOL disableTablet;

/// 非カスタムセル　広告を示すラベルのFrame.
@property (nonatomic) CGRect adFrameInDefaultCell;

/// 広告であることを示すUILabelの文字列.
@property (nonatomic, copy) NSString * _Nonnull adLabelString;

/// 非カスタムセル用 広告画像の位置・サイズ
@property (nonatomic) CGRect imageViewRect;

/// インフィードIDに対応する広告情報を一つ返す.
///
/// <ul><li>広告情報がない場合はnilを返す.</li></ul>
/// \param infeedId 広告情報を取得したいインフィードID.
///
/// \returns  広告情報 or nil.
- (UrcaAdInfo * _Nullable)hasNextAdForInfeedId:(NSString * _Nonnull)infeedId;

/// SDK 共通ログの出力フラグを切り替える.\Remark 
///
/// リリース時はコメントアウト、またはfalseを設定してください.\Remark 
///
/// trueでログを出力.\Remark 
///
/// デフォルト = false.
///
/// \param flag ログ出力クラス.
- (void)logging:(BOOL)flag;

/// 広告情報を初期化.
- (void)clearAd;

/// インフィード広告情報を取得する.
///
/// \param urcaRequest リクエストモデル.
///
/// \param urcaInfeed コールバックデリゲート.
- (void)loadUrcaByRequest:(UrcaRequest * _Nonnull)urcaRequest urcaInfeed:(id <UrcaInfeed> _Nonnull)urcaInfeed;

/// タップされた広告を開く.
///
/// \param cell セル.
///
/// \returns  LPへの遷移と計測を実行した? した : してない.
- (BOOL)openAd:(UIView * _Nonnull)cell;

/// セルに広告の内容を設定する.
///
/// <ul><li>非カスタムセル用.</li><li>UITableViewCellを継承していない場合に使用してください.</li></ul>
/// \param cell 非カスタムセル.
///
/// \param adInfo 広告情報.
///
/// \param height セルの高さ.
///
/// \param imageSize 広告画像のサイズ
- (void)setInfeedToCell:(UITableViewCell * _Nonnull)cell adInfo:(UrcaAdInfo * _Nonnull)adInfo height:(CGFloat)height imageSize:(CGSize)imageSize;
@end


@interface UrcaManager (SWIFT_EXTENSION(Urca))

/// インプ計測を試みる.
///
/// \param target 広告セル.
///
/// \param from 呼び出し元(正当性チェックで使用).
- (void)tryImpression:(UIView * _Nonnull)target from:(NSString * _Nonnull)from;
@end

@class UIImageView;
@class UILabel;
@class UICollectionViewCell;

@interface UrcaManager (SWIFT_EXTENSION(Urca))

/// カスタムセルに広告の内容を設定する.
///
/// <ul><li>カスタムセル用.</li><li>UITableViewCellを継承している場合に使用してください.</li></ul>
/// \param cell カスタムセル(TableViewCell).
///
/// \param adInfo 広告情報.
///
/// \param imageView 広告画像を表示するUIImageView.
///
/// \param titleLabel 広告タイトルのUILabel.
///
/// \param descriptionLabel 広告説明文のUILabel.
///
/// \param advertiserLabel 広告主のUILabel.
///
/// \param adLabel 広告であることを示すUILabel.
///
/// \param height セルの高さ.
///
/// \param imageRect 広告画像の位置・サイズ
- (void)setInfeedToCell:(UITableViewCell * _Nonnull)cell adInfo:(UrcaAdInfo * _Nonnull)adInfo imageView:(UIImageView * _Nonnull)imageView titleLabel:(UILabel * _Nonnull)titleLabel descriptionLabel:(UILabel * _Nullable)descriptionLabel advertiserLabel:(UILabel * _Nonnull)advertiserLabel adLabel:(UILabel * _Nullable)adLabel height:(CGFloat)height imageRect:(CGRect)imageRect;

/// CollectionViewセルに広告の内容を設定する.
///
/// \param cell CollectionViewCell.
///
/// \param adInfo 広告情報.
///
/// \param imageView 広告画像を表示するUIImageView.
///
/// \param titleLabel 広告タイトルのUILabel.
///
/// \param descriptionLabel 広告説明文のUILabel.
///
/// \param advertiserLabel 広告主のUILabel.
///
/// \param adLabel 広告であることを示すUILabel.
///
/// \param size セルのサイズ.
///
/// \param imageRect 広告画像の位置・サイズ
- (void)setInfeedToCell:(UICollectionViewCell * _Nonnull)cell adInfo:(UrcaAdInfo * _Nonnull)adInfo imageView:(UIImageView * _Nonnull)imageView titleLabel:(UILabel * _Nonnull)titleLabel descriptionLabel:(UILabel * _Nullable)descriptionLabel advertiserLabel:(UILabel * _Nonnull)advertiserLabel adLabel:(UILabel * _Nullable)adLabel size:(CGSize)size imageRect:(CGRect)imageRect;
@end



/// リクエストモデル.
SWIFT_CLASS("_TtC4Urca11UrcaRequest")
@interface UrcaRequest : NSObject

/// インフィードID [インフィードID : リクエスト件数].
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable infeeds;
@property (nonatomic) double latitude;
@property (nonatomic) double longitude;
@property (nonatomic) double altitude;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// インフィードIDを件数を設定.
///
/// \param infeedId インフィードID.
///
/// \param count インフィードID毎の件数.
- (void)setInfeedId:(NSString * _Nonnull)infeedId withCount:(NSInteger)count;

/// 位置情報設定.\Remark 
///
/// 高度なし.
///
/// \param latitude 緯度.
///
/// \param longitude 経度.
- (void)setCoodinateWithLatitude:(double)latitude longitude:(double)longitude;

/// 位置情報設定.\Remark 
///
/// 高度なしのメソッド有.
///
/// \param latitude 緯度.
///
/// \param longitude 経度.
///
/// \param altitude 高度.
- (void)setLocationWithLatitude:(double)latitude longitude:(double)longitude altitude:(double)altitude;

/// 通信タイムアウトを設置.
///
/// \param timeout 通信タイムアウト指定.
- (void)setRequestTimeout:(NSTimeInterval)timeout;
@end

#pragma clang diagnostic pop
